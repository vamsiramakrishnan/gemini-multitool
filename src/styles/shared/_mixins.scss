@import './_design-system.scss';

// Glass Effect Mixins
@mixin glass-morphism($opacity: 0.7, $blur: 12px) {
  background: rgba(var(--surface-1), $opacity);
  backdrop-filter: blur($blur);
  border: 1px solid rgba(255, 255, 255, 0.05);
  box-shadow: 0 4px 24px -8px rgba(0, 0, 0, 0.3);
}

@mixin glass-morphism-heavy($opacity: 0.8, $blur: 16px) {
  background: rgba(var(--surface-2), $opacity);
  backdrop-filter: blur($blur);
  border: 1px solid rgba(255, 255, 255, 0.1);
}

// Interactive States
@mixin hover-lift {
  transition: var(--hover-transition);

  &:hover {
    transform: translateY(-4px);
    box-shadow: var(--shadow-lg);
  }
}

// Card Styles
@mixin card-base {
  background: linear-gradient(
    145deg,
    var(--surface-1) 0%,
    var(--surface-0) 100%
  );
  border-radius: var(--radius-lg);
  border: 1px solid rgba(255, 255, 255, 0.05);
  overflow: hidden;
}

// Button Styles
@mixin button-base {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  padding: 0.75rem 1.5rem;
  border-radius: var(--radius-md);
  font-weight: 500;
  transition: var(--transition-all);
  gap: 0.5rem;
  cursor: pointer; // Ensure buttons have a pointer cursor
  border: none; // Remove default border
  font-family: var(--font-ui); // Consistent font
  text-transform: uppercase; // Retro style
  letter-spacing: 0.05em;
}

@mixin button-primary {
  @include button-base;
  background: linear-gradient(
    135deg,
    var(--retro-blue) 0%,  // Use retro colors
    var(--retro-pink) 100%
  );
  color: var(--retro-black); // High contrast text
  text-shadow: 0 0 8px rgba(var(--retro-blue), 0.6); // Add glow

  &:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 32px -8px rgba(var(--retro-blue), 0.4);
  }

  &:active {
      transform: scale(var(--active-scale));
  }
}

// Icon Styles
@mixin icon-container {
  width: 40px;
  height: 40px;
  border-radius: var(--radius-lg);
  display: flex;
  align-items: center;
  justify-content: center;
  background: linear-gradient(
    135deg,
    var(--retro-blue) 0%,
    var(--retro-pink) 100%
  );

  .material-symbols-outlined {
    font-size: 24px;
    color: var(--retro-black); // High contrast icon
  }
}

// Loading States
@mixin loading-spinner {
  &::after {
    content: '';
    width: 24px;
    height: 24px;
    border: 2px solid rgba(var(--retro-blue), 0.1); // Use retro color
    border-top-color: var(--retro-blue);
    border-radius: 50%;
    animation: spin 0.8s cubic-bezier(0.4, 0, 0.2, 1) infinite;
  }
}

// Empty States
@mixin empty-state {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: var(--radius-xl);
  text-align: center;
  min-height: 240px;
  @include glass-morphism;

  .empty-icon {
    font-size: var(--font-size-4xl);
    color: var(--retro-blue); // Use retro color
    margin-bottom: var(--radius-lg);
    opacity: 0.5;
  }
    h3 {
        color: var(--text-primary)
    }
    p {
        color: var(--text-secondary);
    }
}

// Animations (defined in _animations.scss, but referenced here)
// @keyframes spin, @keyframes pulse, @keyframes fadeIn are defined in _animations.scss

// Depth Levels (for shadows and borders)
@mixin depth-1 {
  box-shadow: 0 2px 8px -2px rgba(0,0,0,0.1);
}

@mixin depth-2 {
  box-shadow: 0 4px 16px -4px rgba(0,0,0,0.15);
}

@mixin depth-3 {
  box-shadow: 0 8px 32px -8px rgba(0,0,0,0.2);
}

@mixin depth-border {
  position: relative;

  &::after {
    content: '';
    position: absolute;
    inset: 0;
    border-radius: inherit;
    pointer-events: none;
    border: 1px solid rgba(255,255,255,0.05);
  }
}

// Retro Button Mixins
@mixin retro-button-base {
  position: relative;
  background: linear-gradient(
    165deg,
    rgba($retro-black, 0.8) 0%,
    rgba($retro-black, 0.95) 100%
  );
  border: 1px solid rgba($retro-blue, 0.4);
  color: $retro-blue;
  font-family: var(--font-mono);
  padding: var(--space-xs) var(--space-sm);
  border-radius: var(--radius-sm);
  cursor: pointer;
  transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
  backdrop-filter: blur(var(--blur-sm));
  box-shadow: 
    0 0 0 1px rgba($retro-blue, 0.1),
    0 2px 4px rgba($retro-black, 0.2);
  text-shadow: 0 0 8px rgba($retro-blue, 0.5);
  overflow: hidden;
  
  // Scanline effect
  &::before {
    content: '';
    position: absolute;
    inset: 0;
    background: var(--scanlines);
    opacity: 0.1;
    pointer-events: none;
    mix-blend-mode: overlay;
    z-index: 1;
  }
  
  // Glow effect
  &::after {
    content: '';
    position: absolute;
    inset: -1px;
    background: linear-gradient(
      45deg,
      transparent 0%,
      rgba($retro-blue, 0.1) 100%
    );
    opacity: 0;
    transition: opacity 0.2s ease;
    pointer-events: none;
    z-index: 0;
  }
  
  &:hover {
    transform: translateY(-1px);
    border-color: $retro-pink;
    color: $retro-pink;
    box-shadow: 
      0 0 0 1px rgba($retro-pink, 0.2),
      0 0 20px rgba($retro-pink, 0.2),
      0 4px 8px rgba($retro-black, 0.3);
    text-shadow: 0 0 8px rgba($retro-pink, 0.5);
    
    &::after {
      opacity: 1;
    }
  }
  
  &:active {
    transform: translateY(1px);
    box-shadow: 
      0 0 0 1px rgba($retro-pink, 0.1),
      0 0 10px rgba($retro-pink, 0.1);
  }
  
  &:disabled,
  &.disabled {
    opacity: 0.5;
    cursor: not-allowed;
    pointer-events: none;
    border-color: rgba($retro-blue, 0.2);
    box-shadow: none;
  }
  
  .material-symbols-outlined {
    position: relative;
    z-index: 2;
  }
}

@mixin retro-button-primary {
  @include retro-button-base;
  background: linear-gradient(
    165deg,
    rgba($retro-blue, 0.2) 0%,
    rgba($retro-blue, 0.1) 100%
  );
  border-color: $retro-blue;
  color: $retro-blue;
  box-shadow: 
    0 0 0 1px rgba($retro-blue, 0.2),
    0 0 15px rgba($retro-blue, 0.2);
  
  &:hover {
    background: linear-gradient(
      165deg,
      rgba($retro-pink, 0.2) 0%,
      rgba($retro-pink, 0.1) 100%
    );
  }
}

@mixin retro-button-secondary {
  @include retro-button-base;
  background: rgba($retro-black, 0.3);
  border-color: rgba($retro-blue, 0.3);
  color: $retro-blue;
  
  &:hover {
    border-color: $retro-pink;
    color: $retro-pink;
    background: rgba($retro-black, 0.4);
    box-shadow: 
      0 0 0 1px rgba($retro-pink, 0.2),
      0 0 15px rgba($retro-pink, 0.2);
  }
}

@mixin retro-button-success {
  @include retro-button-base;
  background: linear-gradient(
    165deg,
    rgba($retro-green, 0.2) 0%,
    rgba($retro-green, 0.1) 100%
  );
  border-color: $retro-green;
  color: $retro-green;
  box-shadow: 
    0 0 0 1px rgba($retro-green, 0.2),
    0 0 15px rgba($retro-green, 0.2);
  text-shadow: 0 0 8px rgba($retro-green, 0.5);
  
  &:hover {
    border-color: lighten($retro-green, 10%);
    color: lighten($retro-green, 10%);
    box-shadow: 
      0 0 0 1px rgba($retro-green, 0.3),
      0 0 20px rgba($retro-green, 0.3);
  }
}

@mixin retro-button-danger {
  @include retro-button-base;
  background: linear-gradient(
    165deg,
    rgba($retro-red, 0.2) 0%,
    rgba($retro-red, 0.1) 100%
  );
  border-color: $retro-red;
  color: $retro-red;
  box-shadow: 
    0 0 0 1px rgba($retro-red, 0.2),
    0 0 15px rgba($retro-red, 0.2);
  text-shadow: 0 0 8px rgba($retro-red, 0.5);
  
  &:hover {
    border-color: lighten($retro-red, 10%);
    color: lighten($retro-red, 10%);
    box-shadow: 
      0 0 0 1px rgba($retro-red, 0.3),
      0 0 20px rgba($retro-red, 0.3);
  }
}

@mixin retro-button-small {
  @include retro-button-base;
  padding: var(--space-2xs) var(--space-xs);
  font-size: var(--font-size-sm);
}

@mixin retro-button-large {
  @include retro-button-base;
  padding: var(--space-sm) var(--space-md);
  font-size: var(--font-size-lg);
}

@mixin retro-button-icon {
  @include retro-button-base;
  width: 36px;
  height: 36px;
  padding: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  
  .material-symbols-outlined {
    font-size: 20px;
  }
}

// Custom Scrollbar Mixin
@mixin custom-scrollbar {
  scrollbar-width: thin;
  scrollbar-color: rgba($retro-blue, 0.3) transparent;
  
  &::-webkit-scrollbar {
    width: 6px;
    height: 6px;
  }
  
  &::-webkit-scrollbar-track {
    background: transparent;
  }
  
  &::-webkit-scrollbar-thumb {
    background: rgba($retro-blue, 0.3);
    border-radius: var(--radius-full);
    
    &:hover {
      background: rgba($retro-blue, 0.5);
    }
  }
}

@mixin focus-styling {
    outline: none;
    box-shadow:
      0 0 0 2px rgb(var(--surface-0)),
      0 0 0 4px var(--retro-blue);
}

@mixin retro-border($type: 'primary') {
  @if $type == 'primary' {
    border: var(--terminal-line-primary);
  } @else if $type == 'secondary' {
    border: var(--terminal-line);
  } @else if $type == 'hover' {
    border: var(--terminal-line-hover);
  } @else {
    border: var(--terminal-line); // Default to secondary
  }
}

@mixin retro-box-shadow($type: 'default') {
    @if $type == 'default' {
        box-shadow: var(--terminal-shadow);
    } @else if $type == 'glow'{
        box-shadow: var(--terminal-glow);
    }
}

@mixin padding($top, $right: $top, $bottom: $top, $left: $right) {
  padding: var(--space-#{$top}) var(--space-#{$right}) var(--space-#{$bottom}) var(--space-#{$left});
}

// A mixin for consistent spacing between elements (margin-bottom)
@mixin space-between($space: 'md') {
  margin-bottom: var(--space-#{$space});
}

// Mixin for consistent internal padding
@mixin container-padding($size: 'md') {
  padding: var(--container-padding-#{$size});
  
  @media (max-width: 768px) {
    padding: calc(var(--container-padding-#{$size}) / 2);
  }
}


// CRT screen texture effect
@mixin crt-texture {
  &::before {
    content: '';
    position: absolute;
    inset: 0;
    background: 
      linear-gradient(
        rgba(18, 16, 16, 0) 50%,
        rgba(0, 0, 0, 0.25) 50%
      ),
      linear-gradient(
        90deg,
        rgba(255, 0, 0, 0.06),
        rgba(0, 255, 0, 0.02),
        rgba(0, 0, 255, 0.06)
      );
    background-size: 100% 2px, 3px 100%;
    pointer-events: none;
    z-index: var(--z-overlay);
    mix-blend-mode: multiply;
  }
}

// Scanlines effect
@mixin scanlines {
  background: 
    repeating-linear-gradient(
      0deg,
      rgba(0, 0, 0, 0.15) 0px,
      rgba(0, 0, 0, 0.15) 1px,
      transparent 1px,
      transparent 2px
    );
}

// CRT screen border effect
@mixin crt-screen-border {
  border: 2px solid rgba($retro-black, 0.8);
  box-shadow: 
    inset 0 0 10px rgba($retro-blue, 0.2),
    0 0 20px rgba($retro-blue, 0.1);
  position: relative;
  
  &::after {
    content: '';
    position: absolute;
    inset: -4px;
    border: 1px solid rgba($retro-blue, 0.3);
    border-radius: inherit;
    pointer-events: none;
  }
}

@mixin widget-base {
  position: relative;
  background: var(--surface-1);
  border-radius: var(--radius-lg);
  border: 1px solid var(--surface-3);
  overflow: hidden;
  height: 100%;
  display: flex;
  flex-direction: column;
  transition: all 0.2s ease;

  &:hover {
    border-color: var(--surface-4);
    box-shadow: var(--shadow-sm);
  }
}

@mixin widget-header {
  position: relative;
  z-index: 10;
  background: var(--surface-2);
  border-bottom: 1px solid var(--surface-3);
  padding: var(--space-sm) var(--space-md);
  display: flex;
  align-items: center;
  justify-content: space-between;
}

@mixin widget-content {
  flex: 1;
  min-height: 0;
  overflow: auto;
  position: relative;
  
  &::-webkit-scrollbar {
    width: 6px;
    height: 6px;
  }
  
  &::-webkit-scrollbar-track {
    background: transparent;
  }
  
  &::-webkit-scrollbar-thumb {
    background: var(--surface-3);
    border-radius: var(--radius-full);
    
    &:hover {
      background: var(--surface-4);
    }
  }
}

// Widget-specific mixins
@mixin responsive-text($size) {
  @if $size == 'sm' {
    font-size: clamp(0.75rem, 1.5vw, 0.875rem);
  } @else if $size == 'base' {
    font-size: clamp(0.875rem, 2vw, 1rem);
  } @else if $size == 'lg' {
    font-size: clamp(1rem, 2.5vw, 1.25rem);
  }
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

@mixin control-button {
  width: clamp(28px, 4vw, 32px);
  height: clamp(28px, 4vw, 32px);
  display: flex;
  align-items: center;
  justify-content: center;
  background: transparent;
  border: none;
  color: var(--text-2);
  border-radius: var(--radius-sm);
  cursor: pointer;
  transition: all 0.2s ease;

  &:hover {
    background: var(--surface-3);
    color: var(--text-1);
  }

  .material-symbols-outlined {
    font-size: clamp(18px, 2.5vw, 20px);
  }
}

@mixin scrollable-content {
  flex: 1;
  min-height: 0;
  overflow: auto;
  padding: clamp(0.75rem, 3vw, 1.5rem);
  @include custom-scrollbar;

  font-size: clamp(0.875rem, 2vw, 1rem);
  line-height: 1.5;

  > * + * {
    margin-top: clamp(0.75rem, 2vw, 1.5rem);
  }
}

@mixin collapsed-content {
  max-height: 100px;

  .collapse-overlay {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    height: 60px;
    background: linear-gradient(
      to bottom,
      transparent,
      var(--surface-1)
    );
    display: flex;
    align-items: flex-end;
    justify-content: center;
    padding-bottom: clamp(0.5rem, 2vw, 1rem);

    .expand-button {
      @include responsive-button;
    }
  }
}

@mixin maximized-state {
  position: fixed;
  inset: clamp(0.5rem, 3vw, 1rem);
  z-index: var(--z-modal);
  height: auto;

  .widget-content {
    max-height: none;
  }

  @media (max-width: 640px) {
    inset: 0;
    border-radius: 0;
  }
}

@mixin responsive-container {
  @container (width < 400px) {
    .widget-header {
      padding: 0.5rem 0.75rem;
    }

    .widget-content-inner {
      padding: 0.75rem;
    }
  }
}

@mixin touch-optimizations {
  @media (pointer: coarse) {
    .widget-controls button {
      min-width: 44px;
      min-height: 44px;
    }

    .widget-content-inner {
      a, button, [role="button"] {
        min-height: 44px;
        padding: 0.5rem 1rem;
      }
    }
  }
}

@mixin responsive-button {
  padding: 0.25rem clamp(0.5rem, 2vw, 1rem);
  background: var(--surface-2);
  border: 1px solid var(--surface-3);
  border-radius: var(--radius-sm);
  color: var(--text-2);
  font-size: clamp(0.75rem, 1.5vw, 0.875rem);
  cursor: pointer;
  transition: all 0.2s ease;

  &:hover {
    background: var(--surface-3);
    color: var(--text-1);
  }
}

@mixin retro-button {
  @include retro-button-base;
  background: linear-gradient(
    165deg,
    rgba($retro-blue, 0.2) 0%,
    rgba($retro-blue, 0.1) 100%
  );
  border-color: $retro-blue;
  color: $retro-blue;
  box-shadow: 
    0 0 0 1px rgba($retro-blue, 0.2),
    0 0 15px rgba($retro-blue, 0.2);
  
  &:hover {
    background: linear-gradient(
      165deg,
      rgba($retro-pink, 0.2) 0%,
      rgba($retro-pink, 0.1) 100%
    );
    border-color: $retro-pink;
    color: $retro-pink;
  }
}

// Add new mixins for consistent spacing and hierarchy
@mixin widget-container {
  display: flex;
  flex-direction: column;
  height: 100%;
  min-height: 0;
  background: var(--surface-1);
  border-radius: var(--radius-lg);
  overflow: hidden;
  box-shadow: var(--shadow-sm);
  transition: var(--transition-all);
}

@mixin widget-scrollable {
  flex: 1;
  min-height: 0;
  overflow: auto;
  @include custom-scrollbar;
  padding: var(--space-md);
}

@mixin widget-header {
  position: relative;
  z-index: 10;
  background: var(--surface-2);
  border-bottom: 1px solid var(--surface-3);
  padding: var(--space-sm) var(--space-md);
  display: flex;
  align-items: center;
  justify-content: space-between;
}

@mixin widget-state-transitions {
  // Base transition
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  transform-origin: center;
  will-change: transform, opacity;

  // Maximize state
  &.maximized {
    position: fixed;
    inset: var(--space-md);
    z-index: var(--z-modal);
    transform: none;
    background: rgba($retro-black, 0.98);
    backdrop-filter: blur(var(--blur-lg));
    box-shadow: 
      0 0 0 100vmax rgba($retro-black, 0.5),
      0 0 40px rgba($retro-blue, 0.2);

    .widget-content {
      height: calc(100% - 60px);
      
      .widget-scroll-container,
      .widget-scroll-area {
        max-height: none;
        overflow: auto;
      }
    }

    @media (max-width: 768px) {
      inset: 0;
      border-radius: 0;
    }
  }

  // Minimize state
  &.minimized:not(.maximized) {
    .widget-content {
      max-height: 0;
      overflow: hidden;
      opacity: 0;
    }

    .widget-header {
      border-bottom: none;
      
      .widget-title {
        opacity: 0.7;
      }
    }
  }

  // State transitions
  &.collapsing,
  &.expanding {
    .widget-content {
      transition: max-height 0.3s cubic-bezier(0.4, 0, 0.2, 1),
                  opacity 0.2s cubic-bezier(0.4, 0, 0.2, 1);
    }
  }
}

@mixin widget-component {
  position: relative;
  transition: var(--transition-all);
  z-index: var(--z-widget);
  background: var(--surface-1);
  border-radius: var(--radius-lg);
  border: 1px solid var(--surface-2);
  overflow: hidden;
  
  &:hover {
    box-shadow: var(--terminal-glow);
    border-color: var(--neon-blue);
  }
  
  &.dragging {
    opacity: 0.7;
    transform: scale(1.02);
    cursor: grabbing;
  }

  .widget-header {
    padding: var(--space-sm) var(--space-md);
    background: rgba(var(--surface-2), 0.9);
    border-bottom: var(--terminal-line);
    display: flex;
    align-items: center;
    justify-content: space-between;
    font-family: var(--font-display);
    height: var(--header-height);
    
    h2 {
      color: var(--neon-blue);
      font-size: var(--font-size-lg);
      font-weight: 600;
      letter-spacing: 0.02em;
      margin: 0;
    }
    
    .controls {
      display: flex;
      gap: var(--space-xs);
    }
  }

  .widget-content {
    padding: var(--space-md);
    font-family: var(--font-mono);
    color: var(--text-secondary);
  }
}

@mixin widget-content-styles {
  // Only style the inner content, not the container
  position: relative;
  width: 100%;
  height: 100%;
  display: flex;
  flex-direction: column;
  background: rgba($retro-black, 0.95);
  border-radius: var(--radius-md);
  overflow: hidden;
  backdrop-filter: blur(var(--blur-md));
  border: var(--terminal-line);

  // Inner sections should use padding, not margins
  > * {
    padding: var(--space-md);
    border-bottom: var(--terminal-line);
    
    &:last-child {
      border-bottom: none;
    }
  }
}

// Add new systematic interaction mixins
@mixin interactive-element {
  cursor: pointer;
  transition: all var(--animation-speed-base) var(--animation-easing);
  
  &:hover {
    transform: translateY(-2px);
    box-shadow: var(--glow-primary);
  }
  
  &:active {
    transform: translateY(0);
  }
  
  &:focus-visible {
    @include focus-ring;
  }
}

// Systematic spacing mixin
@mixin stack($gap: 'md', $direction: 'vertical') {
  display: flex;
  flex-direction: if($direction == 'vertical', column, row);
  gap: var(--space-#{$gap});
}

// Add new systematic layout mixins
@mixin responsive-grid($min-width: 300px, $gap: 'md') {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(min(100%, $min-width), 1fr));
  gap: var(--space-#{$gap});
  container-type: inline-size;

  @supports not (container-type: inline-size) {
    @content; // Fallback for older browsers
  }
}

// Widget State Mixins
@mixin widget-maximized {
  position: fixed;
  inset: var(--space-md);
  z-index: var(--z-modal);
  background: rgba(var(--surface-1), 0.8);
  border-radius: var(--radius-lg);
  border: var(--terminal-line);
  box-shadow: var(--terminal-shadow);
  
  .widget-content {
    height: calc(100% - var(--header-height));
    max-height: none;
    overflow-y: auto;
  }

  @media (max-width: 768px) {
    inset: 0;
    border-radius: 0;
  }
}

@mixin app-grid-layout {
  display: grid;
  grid-template-areas:
    "header header"
    "main   panel"
    "footer footer";
  grid-template-columns: 1fr auto;
  grid-template-rows: auto 1fr auto;
  height: 100vh;
  overflow: hidden;
  background: var(--surface-0);

  @media (max-width: 768px) {
    grid-template-areas:
      "header"
      "main"
      "footer";
    grid-template-columns: 1fr;
  }
}

@mixin app-header {
  grid-area: header;
  position: relative;
  z-index: var(--z-header);
  background: var(--surface-1);
  border-bottom: var(--terminal-line);
  padding: var(--space-sm);
  height: var(--header-height);
  display: flex;
  align-items: center;
}

@mixin retro-icon-container($color: $retro-blue) {
  position: relative;
  display: flex;
  align-items: center;
  justify-content: center;
  border: 1px solid $color;
  border-radius: var(--radius-sm);
  background: rgba($retro-black, 0.3);
  box-shadow: 0 0 20px rgba($color, 0.2);

  &::before, &::after {
    content: '';
    position: absolute;
    inset: -1px;
    border: 1px solid $color;
    border-radius: inherit;
  }
  
  &::before { opacity: 0.3; }
  &::after { opacity: 0.1; inset: -2px; }
}

// Holographic Effects
@mixin holographic-display($primary, $secondary, $intensity: 0.6) {
  position: relative;
  background: linear-gradient(
    45deg,
    rgba($primary, 0.1) 0%,
    rgba($secondary, 0.1) 100%
  );
  box-shadow: 
    0 0 30px rgba($primary, $intensity * 0.3),
    inset 0 0 15px rgba($secondary, $intensity * 0.2);
  backdrop-filter: blur(10px);
  
  &::after {
    content: '';
    position: absolute;
    inset: 0;
    background: repeating-linear-gradient(
      0deg,
      rgba($primary, 0.1) 0%,
      rgba($primary, 0.1) 1px,
      transparent 4px
    );
    pointer-events: none;
  }
}

// Cyber Interface Elements
@mixin cyber-button($color: $retro-blue) {
  @include retro-toggle($color);
  font-family: var(--font-cyber);
  text-transform: uppercase;
  letter-spacing: 0.1em;
  
  &:hover {
    transform: skewX(-10deg) translateY(-2px);
    text-shadow: 0 0 15px rgba($color, 0.8);
  }
}

@mixin cyber-header {
  font-family: var(--font-cyber);
  text-transform: uppercase;
  letter-spacing: 0.1em;
  position: relative;
  
  &::after {
    content: '';
    position: absolute;
    bottom: -4px;
    left: 0;
    right: 0;
    height: 2px;
    background: linear-gradient(
      90deg,
      transparent 0%,
      $retro-blue 50%,
      transparent 100%
    );
    animation: header-glow 2s infinite;
  }
}

@keyframes header-glow {
  0%, 100% { opacity: 0.3; }
  50% { opacity: 1; }
}

@mixin neon-text-glow($color, $intensity: 0.8) {
  text-shadow: 
    0 0 calc(10px * $intensity) rgba($color, 0.5),
    0 0 calc(20px * $intensity) rgba($color, 0.3),
    0 0 calc(30px * $intensity) rgba($color, 0.1);
}

@mixin cassette-button {
  @include retro-border;
  background: rgba($retro-black, 0.4);
  padding: var(--space-sm) var(--space-md);
  transition: var(--hover-transition);
  position: relative;
  
  &::before {
    content: '';
    position: absolute;
    inset: 0;
    background: linear-gradient(
      145deg,
      rgba(255,255,255,0.1) 0%,
      rgba(0,0,0,0.2) 100%
    );
    mix-blend-mode: overlay;
  }
  
  &:hover {
    transform: translateY(-2px);
    box-shadow: var(--terminal-glow);
  }
}

@mixin retro-glow-hover {
  transition: var(--hover-transition);
  
  &:hover {
    box-shadow: 0 0 15px rgba($retro-blue, 0.2);
    transform: translateY(-2px);
  }
}

@mixin retro-icon-with-text {
  display: flex;
  align-items: center;
  gap: var(--space-sm);
  
  .material-symbols-outlined {
    @include retro-icon-container;
    padding: var(--space-xs);
  }
}

@mixin holographic-grid($color) {
  position: relative;
  background: 
    repeating-linear-gradient(
      0deg,
      rgba($color, 0.05) 0px,
      rgba($color, 0.05) 1px,
      transparent 1px,
      transparent 5px
    ),
    repeating-linear-gradient(
      90deg,
      rgba($color, 0.05) 0px,
      rgba($color, 0.05) 1px,
      transparent 1px,
      transparent 5px
    );
  
  &::before {
    content: '';
    position: absolute;
    inset: 0;
    background: radial-gradient(
      circle at 50% 50%,
      rgba($color, 0.1) 0%,
      transparent 60%
    );
    animation: hologram-pulse 4s infinite;
  }
}

@mixin holographic-hover($color) {
  transition: var(--hover-transition);
  
  &:hover {
    box-shadow: 0 0 25px rgba($color, 0.3);
    transform: translateY(-2px) scale(1.02);
  }
}

@keyframes hologram-pulse {
  0%, 100% { opacity: 0.3; }
  50% { opacity: 0.6; }
}

@mixin neon-panel($glow-color, $border-style: 'solid') {
  position: relative;
  background: rgba($retro-black, 0.6);
  border: 1px $border-style rgba($glow-color, 0.3);
  border-radius: var(--radius-sm);
  box-shadow: 
    0 0 15px rgba($glow-color, 0.2),
    inset 0 0 10px rgba($glow-color, 0.1);
  
  &::after {
    content: '';
    position: absolute;
    inset: -2px;
    border: 1px solid rgba($glow-color, 0.1);
    border-radius: inherit;
    pointer-events: none;
    animation: neon-pulse 2s infinite;
  }
  
  @keyframes neon-pulse {
    0%, 100% { opacity: 0.5; }
    50% { opacity: 1; }
  }
}

@mixin cyber-input {
  position: relative;
  width: 100%;
  padding: var(--space-sm) var(--space-md);
  background: rgba($retro-black, 0.3);
  border: 1px solid rgba($retro-blue, 0.3);
  border-radius: var(--radius-sm);
  color: $retro-blue;
  font-family: var(--font-ui);
  transition: var(--hover-transition);

  &::placeholder {
    color: rgba($retro-blue, 0.5);
  }

  &:focus {
    @include holographic-focus;
    // Fallback if holographic-focus is removed
    outline: none;
    border-color: $retro-pink;
    box-shadow: var(--terminal-glow);
  }
}

@mixin cyber-select {
  @include cyber-input;
  appearance: none;
  background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='%23#{str-slice(inspect($retro-blue), 2)}'%3E%3Cpath d='M7 10l5 5 5-5z'/%3E%3C/svg%3E");
  background-repeat: no-repeat;
  background-position: right var(--space-sm) center;
}

@mixin status-indicator($state) {
  $colors: (
    'success': $retro-green,
    'error': $retro-red,
    'warning': $retro-yellow,
    'info': $retro-blue
  );
  
  position: relative;
  padding-left: var(--space-lg);
  
  &::before {
    content: '';
    position: absolute;
    left: 0;
    top: 50%;
    transform: translateY(-50%);
    width: 12px;
    height: 12px;
    border-radius: 50%;
    background: map-get($colors, $state);
    box-shadow: 0 0 10px rgba(map-get($colors, $state), 0.3);
    animation: status-pulse 2s infinite;
  }
}

@mixin holographic-overlay($intensity: 0.3) {
  position: relative;
  
  &::before {
    content: '';
    position: absolute;
    inset: 0;
    background: 
      radial-gradient(circle at 50% 50%, rgba($retro-blue, $intensity) 0%, transparent 60%),
      repeating-linear-gradient(
        45deg,
        rgba($retro-pink, $intensity * 0.3) 0%,
        rgba($retro-pink, $intensity * 0.3) 1px,
        transparent 2px,
        transparent 5px
      );
    pointer-events: none;
    mix-blend-mode: overlay;
  }
}

// Add this with the other interactive state mixins
@mixin focus-ring {
  outline: 2px solid var(--retro-blue);
  outline-offset: 2px;
  border-radius: var(--radius-sm);
  box-shadow: 0 0 0 3px rgba(var(--retro-blue), 0.1);
}

// Update the interactive-element mixin to use it
@mixin interactive-element {
  cursor: pointer;
  transition: all var(--animation-speed-base) var(--animation-easing);
  
  &:hover {
    transform: translateY(-2px);
    box-shadow: var(--glow-primary);
  }
  
  &:active {
    transform: translateY(0);
  }
  
  &:focus-visible {
    @include focus-ring;
  }
}

// Add this with the other holographic mixins
@mixin holographic-focus {
  outline: none;
  border-color: $retro-pink;
  box-shadow: 
    0 0 0 2px rgba($retro-black, 0.8),
    0 0 15px rgba($retro-pink, 0.4);
  background: linear-gradient(
    165deg,
    rgba($retro-pink, 0.1) 0%,
    rgba($retro-pink, 0.05) 100%
  );
}

// Add this with other retro mixins
@mixin retro-toggle($color: $retro-blue) {
  display: inline-flex;
  align-items: center;
  padding: var(--space-xs) var(--space-sm);
  background: rgba($retro-black, 0.3);
  border: 1px solid rgba($color, 0.3);
  border-radius: var(--radius-sm);
  color: $color;
  font-size: var(--font-size-sm);
  transition: var(--hover-transition);
  cursor: pointer;

  &:hover {
    border-color: $retro-pink;
    color: $retro-pink;
    box-shadow: var(--terminal-glow);
  }
}

// Add this with other widget mixins
@mixin widget-card {
  background: rgba($retro-black, 0.3);
  border: 1px solid rgba($retro-blue, 0.2);
  border-radius: var(--radius-sm);
  overflow: hidden;
  transition: var(--hover-transition);
  position: relative;

  &:hover {
    transform: translateY(-2px);
    border-color: $retro-pink;
    box-shadow: var(--terminal-glow);
  }

  &::before {
    content: '';
    position: absolute;
    inset: 0;
    background: var(--scanlines);
    opacity: 0.1;
    pointer-events: none;
    mix-blend-mode: overlay;
  }
}

// Add with other retro mixins
@mixin retro-text-secondary {
  font-size: var(--font-size-xs);
  color: rgba($retro-blue, 0.6);
  text-transform: uppercase;
  letter-spacing: 0.05em;
}

// Add with other widget mixins
@mixin widget-loading {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  min-height: 200px;
  padding: var(--space-xl);
  text-align: center;
  background: rgba($retro-black, 0.85);
  backdrop-filter: blur(var(--blur-sm));

  .material-symbols-outlined {
    color: $retro-blue;
    font-size: 24px;
    animation: spin 1s linear infinite;
  }

  .loading-message {
    color: $retro-blue;
    margin-top: var(--space-sm);
    font-family: var(--font-ui);
    text-shadow: 0 0 10px rgba($retro-blue, 0.3);
  }

  @keyframes spin {
    to { transform: rotate(360deg); }
  }
}

.stat-value {
  font-size: var(--font-size-sm);
}

.cyber-button {
  font-size: var(--font-size-sm);
  padding: var(--space-xs) var(--space-sm);
}

.retro-text-secondary {
  font-size: var(--font-size-xs);
} 